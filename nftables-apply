#!/usr/bin/env bash
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.  Please see LICENSE.txt at the top level of
# the source code distribution for details.
#
# @package nftables-apply
# @author <felix.bouynot@setenforce.one>
# @link https://github.com/fbouynot/scripts/blob/main/nftables-apply
# @copyright <felix.bouynot@setenforce.one>
#
# Free adaptation for nftables of iptables-apply (https://github.com/wertarbyte/iptables/blob/master/iptables-apply)
#

# -e: When a command fails, bash exits instead of continuing with the rest of the script
# -u: This will make the script fail, when accessing an unset variable
# -o pipefail: This will ensure that a pipeline command is treated as failed, even if one command in the pipeline fails
set -euo pipefail

# Enable debug mode by running your script as TRACE=1 ./script.sh instead of ./script.sh
if [[ "${TRACE-0}" == "1" ]]
then
    set -o xtrace
fi

readonly PROGNAME="${0##*/}"
readonly VERSION="1.2.1"
readonly RED=$(tput setaf 1)
readonly NC=$(tput sgr0) # No Color

readonly DEFAULT_TIMEOUT=15
readonly DEFAULT_DESTINATION_FILE=/etc/nftables.conf
readonly DEFAULT_SOURCE_FILE=/etc/nftables-candidate.conf

help() {
    cat << EOF
Usage: ${PROGNAME} [-Vh] [ { -s | --source-file } <source-file> ] [ { -d | --destination-file } <destination-file> ] [ { -t | --timeout } <timeout> ]
-h    --help                                                     Print this message.
-V    --version                                                  Print the version.
-s    --source-file        STRING                                The source file for candidate config.           (default: ${DEFAULT_SOURCE_FILE})
-d    --destination-file   STRING                                The destination file where to write the config. (default: ${DEFAULT_DESTINATION_FILE})
-t    --timeout            INT                                   The time to wait before rolling back.           (default: ${DEFAULT_TIMEOUT})
EOF

    exit 2
}

version() {
    cat << EOF
${PROGNAME} version ${VERSION} under GPLv3 licence.
EOF

    exit 2
}

# Deal with arguments
while [[ $# -gt 1 ]]
do
    key="${1}"

    case $key in
        -h|--help)
            help
            ;;
        -s|--source-file)
            export SOURCE_FILE="${2}"
            shift # consume -s
            ;;
        -d|--destination-file)
            export DESTINATION_FILE="${2}"
            shift # consume -d
            ;;
        -t|--timeout)
            export TIMEOUT="${2}"
            shift # consume -t
            ;;
        -V|--version)
            version
            ;;
        *)
        ;;
    esac
    shift # consume $1
done

# Set defaults if no options specified
SOURCE_FILE="${SOURCE_FILE:-$DEFAULT_SOURCE_FILE}"
DESTINATION_FILE="${DESTINATION_FILE:-$DEFAULT_DESTINATION_FILE}"
TIMEOUT="${TIMEOUT:-$DEFAULT_TIMEOUT}"

# Change directory to base script directory
cd "$(dirname "${0}")"

# Check root permissions
check_root() {
    # Check the command is run as root
    if [ "${EUID}" -ne 0 ]
    then
        echo -e "${RED}E:${NC} please run as root" >&2
        exit 3
    fi

    return 0
}

restore() {
    nft flush ruleset
    nft -f /tmp/nftables.conf.bak
    rm -f /tmp/nftables.conf.bak

    # Start fail2ban
    if $(systemctl is-enabled fail2ban > /dev/null 2>&1)
    then
        systemctl start fail2ban 2>/dev/null
    fi

    return 0
}

save() {
    cp "${SOURCE_FILE}" "${DESTINATION_FILE}"
    echo -e "\nConfiguration changed"

    return 0
}

# Main function
main() {
    # Check the command is run as root
    check_root

    # Check if we can read the destination file
    if [[ ! -r "${DESTINATION_FILE}" ]]
    then
        echo -e "${RED}E:${NC} cannot read ${DESTINATION_FILE}" >&2
        exit 4
    fi

    # Backup current ruleset
    nft list ruleset > /tmp/nftables.conf.bak

    # Check if we can read the source file
    if [[ ! -r "${SOURCE_FILE}" ]]
    then
        echo -e "${RED}E:${NC} cannot read ${SOURCE_FILE}" >&2
        exit 5
    fi

    # Dry run new ruleset, exit if failures
    nft -f "${SOURCE_FILE}" || (echo -e "${RED}E:${NC} Invalid rules, exiting" >&2 && exit 6)

    # Check the candidate configuration starts by flushing ruleset
    if [[ $(head -n 1 /etc/nftables-candidate.conf) != "flush ruleset" ]]
    then
        sed -i '1s/^/flush ruleset\n/' "${SOURCE_FILE}"
    fi

    # Stop fail2ban
    if $(systemctl is-active fail2ban > /dev/null 2>&1)
    then
        systemctl stop fail2ban 2>/dev/null
    fi

    # Apply new ruleset, rollback if timeout
    timeout "${TIMEOUT}"s nft -f "${SOURCE_FILE}" || (echo -e "${RED}E:${NC} timeout while applying new configuration, rolling back to the previous ruleset" >&2 && restore && exit 7)

    # Ask the user if they can open a new connection
    # If they can't, rollback
    # If they can, save
    echo -n "Can you establish NEW connections to the machine? (y/N) "
    read -r -n1 -t "${TIMEOUT}" ANSWER 2>&1 || :
    if [[ "${ANSWER}" == "y" ]]
    then
        save
    else
        echo -e "\n${RED}E:${NC} rolling back to the previous ruleset" >&2
        restore
        exit 8
    fi
    rm -f /tmp/nftables.conf.bak

    # Start fail2ban
    if $(systemctl is-enabled fail2ban > /dev/null 2>&1)
    then
        systemctl start fail2ban 2>/dev/null
    fi

    exit 0
}

main "$@"
